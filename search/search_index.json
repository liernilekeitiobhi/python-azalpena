{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SARRERA","text":"<p>Web honetan honetan Python programazio hizkuntzaren oinarri-oinarrizko kontzeptu batzuk ikusiko ditugu.</p> <p></p>"},{"location":"#zer-da-programazio-hizkuntza-bat","title":"Zer da programazio hizkuntza bat?","text":"<p>Programazio hizkuntza bat ordenagailu bati agindu jakin batzuk emateko erabiltzen den hizkuntza da. Adibidez, Python edo JavaScript dira programazio hizkuntzak, eta horiekin aplikazioak edo webguneak sortu daitezke.</p> <p>Programazio hizkuntza bat menperatzeko, bere hitz gakoak buruz ikasi behar dira, hitz hauetako bakoitzak agindu ezberdin bat emango baitio ordenagailuari. Horretaz gain, hitz hauek ze formatutan idatzi behar diren ere jakin behar da. </p> <p>Hala ere, gauza asko buruz ikastea ezinezkoa da, baina programazio hizkuntza bakoitzean dokumentazioaren inguruko informazio zabala dago. Hau adibidez, Pythonena: https://docs.python.org/3.13/</p>"},{"location":"aldagai-motak/","title":"ALDAGAIEN PORTAERA ULERTU","text":"<p>Kodearen helburuaren arabera, aldagai mota ezberdinak beharko ditugu. Orain arte bi ikusi ditugu: zenbakiak eta tesua, baina gehiago daude. </p> <ul> <li>Zenbakiak</li> <li>String</li> <li>Boolearrak</li> <li>Zerrendak</li> <li>Tuplak</li> <li>Hiztegiak</li> <li>...</li> </ul> <p>Gainera, oso garrantzitsua da kode guztian zehar sortutako aldagaiak nolakoak diren jakitea, bestela oso zaila da erroreak identifikatzea.</p>"},{"location":"aldagai-motak/#nola-jakin-ze-aldagai-mota-den","title":"NOLA JAKIN ZE ALDAGAI MOTA DEN?","text":"<p><code>type()</code> funtzioarekin:</p> aldagai_motak.py<pre><code>a = 32\nb = 1.43\nc = 'Kaixo, ni string (testua) naiz'\nd = True\ne = ['ni', 'zerrenda', 'naiz']\nf = ('ni', 'tupla')\ng = {'ni':'hiztegia'}\n\nprint('a-ren mota: ', type(a)) # int\nprint('b-ren mota: ', type(b)) # float\nprint('c-ren mota: ', type(c)) # str\nprint('d-ren mota: ', type(d)) # bool\nprint('e-ren mota: ', type(e)) # list\nprint('f-ren mota: ', type(f)) # tuple\nprint('g-ren mota: ', type(g)) # dict\n</code></pre>"},{"location":"aldagai-motak/#metodoak-eta-funtzioak-aldagaietan","title":"METODOAK eta FUNTZIOAK ALDAGAIETAN","text":"<p>Honen ondoren, aldagai motak ikusten hasiko gara banan-banan. Baina garrantzitsua da hasi aurretik ulertzea Pythonek metodo eta funtzio prediseinatu (built-in) batzuk dituela, aldagai motaren arabera erabili ditzakegunak. </p> <p>Adibidez, <code>len()</code> funtzioak luzeera itzuliko dit:</p> funtzioak.py<pre><code>print(len('Kaixo')) # Kaixo hitzaren karaktere kopurua itzuliko dit.\n</code></pre> <p><code>upper()</code> metodoak berriz, hitz bat maiuskulaz jarriko dit: metodoak.py<pre><code>print('kaixo'.upper()) # Kaixo hitza maiuskulaz jarriko da\n</code></pre></p>"},{"location":"aldagai-motak/#zergatik-da-garrantzitsua-funtzioak-eta-metodoak-bereiztea","title":"ZERGATIK DA GARRANTZITSUA FUNTZIOAK ETA METODOAK BEREIZTEA?","text":""},{"location":"aldagai-motak/#metodoak","title":"METODOAK","text":"<p>Metodo bat aldagai mota bati lotuta dago beti. Hau da <code>str</code> batentzat pentsatua dagoen metodoa ezin dugu <code>list</code> batentzat erabili. </p> <p>Metodoa erabiltzeko <code>aldagaia.metodoaren_izena(argumentuak)</code> formatua erabiltzen da. Batzuetan ez dago argumentu beharrik eta orduan parentesia hutsik uzten da. Adibidez, <code>upper()</code> metodoa testuentzat soilik da. </p> metodoak.py<pre><code>print('kaixo'.upper()) # Kaixo hitza maiuskulaz jarriko da\n</code></pre> errorea.py<pre><code>type(['kaixo','mundua']) # list\nprint(['kaixo','mundua'].upper()) # Esango digu zerrenda batek ez duela upper metodoa\n\n# 'list' object has no attribute 'upper'\n</code></pre>"},{"location":"aldagai-motak/#funtzioak","title":"FUNTZIOAK","text":"<p>Funtzio bat unibertsala da. Edozein aldagai motari aplikatu diezaiokegu orokorrean. <code>funtzioaren_izena(aldagaiak)</code> formatua jarraitzen dute. Guk ikasiko dugu gure funtzio propioak sortzen, baina Pythonek guk nahi duguna egiten duen bat badauka zergatik ez erabili? built-in functions deitzen zaie. </p> <p>Ondorengo adibidean <code>len()</code> funtzioa erabiltzen dugu <code>str</code> baterako lehendabizi eta <code>list</code> baterako gero. Hau da, funtzioa bi aldagai mota ezberdinei aplikatu ahal izan diegu. </p> funtzioak.py<pre><code>kaixo_hitzaren_luzeera = len('Kaixo') # Kaixo hitzaren karaktere kopurua itzuliko dit.\nzerrenda_luzeera = len([1,2,3]) # Zerrendaren luzeera itzuliko dit\nprint(kaixo_hitzaren_luzeera)\nprint(zerrenda_luzeera) \n</code></pre>"},{"location":"aldagai-motak/#in-place-vs-berria-itzultzea","title":"In-place vs. Berria itzultzea:","text":"<p>Metodo askok objektua aldatzen dute (in-place), funtzioek berriz, kopia bat itzultzen dute (berria). Hau ulertzeko azter dezagun ordenatzeko balio duten ondorengoak:</p> <ul> <li><code>sorted()</code> funtzioa</li> <li><code>sort()</code> zerrendentzako metodoa.</li> </ul> sorted()_funtzioa.py<pre><code>zerrenda = [5,0,7,2,9,1]\nzerrenda_ordenatua = sorted(zerrenda) # Funtzioak zerrenda ordenatu du eta kopia bat eman digu guk aldagai batean gorde dezakeguna\nprint('Zerrenda ordenatua: ',zerrenda_ordenatua) \nprint('Zerrenda originala: ',zerrenda) # Zerrenda originala berdin mantentzen da\n</code></pre> sort()_metodoa_gaizki.py<pre><code>zerrenda = [5,0,7,2,9,1]\nzerrenda_ordenatua = zerrenda.sort() # Metodoak zerrenda ordenatu du, baina ez digu kopia bat ematen, beraz ezin dugu aldagai batean gorde\nprint('Zerrenda ordenatua: ', zerrenda_ordenatua) # hutsik egongo da\nprint('Zerrenda originala: ',zerrenda) # Metodoa aplikatzeak zerrenda originala aldatu du\n</code></pre> <p>HORRELA EGIN BEHARKO LITZATEKE: sort()_metodoa_ondo.py<pre><code>zerrenda = [5,0,7,2,9,1]\nzerrenda.sort() # Zerrenda originala ordenatzen dugu hemen\nprint(zerrenda) # Zerrenda originala galdu dugu\n</code></pre></p> <p>Metodoak erabiltzea oso erosoa da datu originalak behar ez ditugunean. Baina datu originala galdu nahi ez dugunean ezin ditugu erabili, edota aldagai auxiliar batean gorde behar dugu originala. Badaude metodo batzuk kopia itzultzen dutenak, horregatik da hain garrantzitsua dokumentazioa irakurtzea, ulertzea eta interpretatzen jakitea. Gainera, beti egin ditzakegu frogak metodo eta funtzio bakoitzak nola funtzionatzen duen ikasteko.</p> <p>Dokumentazioa: Funtzioak eta Metodoak</p> <p>Pythonen built-in types eta bakoitzaren metodoak: https://docs.python.org/3/library/stdtypes.html</p> <p>Pythonen built-in funtzioak: https://docs.python.org/3/library/functions.html</p>"},{"location":"aldagai-motak/#non-daude-aldagaiak-kodea-exekutatzen-den-bitartean","title":"NON DAUDE ALDAGAIAK KODEA EXEKUTATZEN DEN BITARTEAN?","text":"<p>Aldagaiak memorian gordetzen dira kodea exekutatzen den bitartean. </p> <ul> <li> <p>Memoria Nagusia (RAM):     Aldagaiak programa martxan dagoen bitartean RAM-ean daude.     Adibidez: <code>kolorea = \"urdina\"</code> \u2192 <code>\"urdina\"</code> RAM-eko leku batean gordetzen da. Aldagai gehiegi edo handiegiak erabiliz gero, programa moteldu daiteke, edota memoria nahikoa ez badugu, funtzionatzeari utzi diezaioke. Horregatik garrantzitsua da ahalik eta kode optimizatuena idaztea.</p> </li> <li> <p>CPU-ko Erregistroak:     Aldagaiak maiz erabiltzen badira, CPU-ak bere erregistroetan gorde ditzake (azkarrago exekutatzeko).</p> </li> </ul> <p>Programa amaitzen denean RAM garbitzen da: aldagai guztiak ezabatzen dira eta beste programa batzuentzat lekua askatzen da. Programa amaitzean aldagaien bat gorde nahi badugu, datu-base bat edo fitxategi bat erabili beharko dugu.</p> <p>Hau ulertzeko bi aldagaien balioen trukaketa nola egiten den adierazten duen adibide bat aztertuko dugu:</p> <p>Demagun hasieran <code>a</code> eta <code>b</code> aldagaiak ditugula beraien balioekin: <code>'A'</code> eta <code>'B'</code>, hurrenez hurren. Baina alderantziz izatea nahi dugu. Hau da, amaieran <code>a = 'B'</code> eta <code>b = 'A'</code></p> <p>Ezin dugu hau egin, ikusi azpiko kodea eta irudia batera: aldagaien_trukaketa_gaizki.py<pre><code>a = 'A' # Hasierako esleipena\nb = 'B' # Hasierako esleipena\nb = a # b-ri 'A' jarri diogu\na = b # a-ri b jarri diogu, baina b momentu honetan 'A' da\nprint('b-ren balio berria: ', b)\nprint('a-ren balio berria: ', a)\n</code></pre></p> <p></p> <p>Trukaketa egiteko auxiliar bat erabili beharrean gaude:</p> aldagaien_trukaketa_ondo.py<pre><code>a = 'A' # Hasierako esleipena\nb = 'B' # Hasierako esleipena\naux = b # aux sortu b-ren baliora apuntatzen\nb = a # b-ri 'A' jarri diogu\na = aux # aux aldagaiean b-ren balioa ('B') gordeta utzi dugu, beraz a horra aldatu\nprint('b-ren balio berria: ', b)\nprint('a-ren balio berria: ', a)\n</code></pre> <p></p>"},{"location":"aldagai-motak/#jarri-praktikan","title":"JARRI PRAKTIKAN","text":""},{"location":"aldagai-motak/#1ariketa","title":"1.ARIKETA","text":"<p>Kopiatu ondoko kodea zure ordenagailuan: <pre><code>import random\na = random.randrange(100)\nb = random.randrange(100)\nc = random.randrange(100)\n\nprint('ALDAGAIEN BALIO ORIGINALA')\nprint('a: ', a, ', b: ', b, ', c: ', c) \n\n# Zure kodea hemen joango da\n\nprint('ALDAGAIEN BALIO ALDATUA')\n# Hemen inprimatuko duzu</code></pre> Kode honek a, b eta c aldagaiei 1etik 100rako ausazko zenbaki bat esleitzen die. Zuk egindako kodearen bitartez hauek trukatzea lortu behar duzu. Hau da: </p> <ul> <li>lehen a-ren balioa zena orain b-rena izango da.</li> <li>lehen b-ren balioa zena orain c-rena izango da.</li> <li>lehen c-ren balioa zena orain a-rena izango da</li> </ul> <p>Espero den emaitza horrelako zerbait izango da (ezin dut zehazki esan pythonek ausaz aukeratuko baititu balioak): <pre><code>ALDAGAIEN BALIO ORIGINALA\na: 16, b: 65, c: 33\nALDAGAIEN BALIO ALDATUA\na: 33, b: 16, c: 65</code></pre></p>"},{"location":"aldagaiak-esleitu/","title":"ALDAGAIAK ESLEITU","text":"<p>Gure kodean zehar aldagai ezberdinak beharko ditugu beti. Horregatik, hauek nola esleitzen diren jakin behar dugu. </p> <p>TEORIA: Nola esleitu aldagai bat</p> <p>Aldagaia kutxa baten moduan irudikatu dezakegu gure buruan, barruan balio bat duena. Formatua: <pre><code>guk_jarritako_aldagaiaren_izena = aldagaiaren_balioa</code></pre></p>"},{"location":"aldagaiak-esleitu/#adibideak","title":"ADIBIDEAK","text":""},{"location":"aldagaiak-esleitu/#1adibidea-aldagaia-esleitu","title":"1.ADIBIDEA: ALDAGAIA ESLEITU","text":"<p>Kasu honetan <code>batura</code> izeneko aldagiaean <code>5</code> edukiko dugu gordeta. aldagaien_esleipena.py<pre><code>lehen_aldagaia = 2\nbigarren_aldagaia = 3\nbatura = lehen_aldagaia + bigarren_aldagaia\nprint(batura)\n</code></pre></p>"},{"location":"aldagaiak-esleitu/#2adibidea-aldagaia-berresleitu","title":"2.ADIBIDEA: ALDAGAIA BERRESLEITU","text":"<p>Kasu honetan <code>batura</code> izeneko aldagiaean <code>7</code> edukiko dugu gordeta. <code>lehen_aldagaia</code> kutxatxoan gauza bakarra eduki dezakegu gordeta, eta kodea goitik behera irakurtzen denez, esleitu diogun azkena gordeko du.  aldagaien_berresleipena.py<pre><code>lehen_aldagaia = 2\nbigarren_aldagaia = 3\nlehen_aldagaia = 4\nbatura = lehen_aldagaia + bigarren_aldagaia\nprint(batura)\n</code></pre></p>"},{"location":"aldagaiak-esleitu/#jarri-praktikan","title":"JARRI PRAKTIKAN","text":"<p>Kopiatu kode hau zure ordenagailuan:</p> <p><pre><code>import random\na = random.randrange(10)\nb = random.randrange(10)\n\n# Zure kodea hemen joango da\n</code></pre> Kode honek a eta b aldagaiei 1etik 10erako ausazko zenbaki bat esleitzen die.</p> <p>Kodea exekutatzean inprimatuta espero den emaitzaren antzekoa jarraian agertzen da. Ez dakit pythonek ze zenbaki emango dituen ausaz, beraz ez dakit emaitza zehatza, baina formatua errespetatu. Kodea exekutatzen duzun bakoitzean emaitza ezberdin bat edukiko duzu, baina beti zentzuzkoa izan behar da. </p> <pre><code>============\nBATUKETA\n============\n10+4=14\n\n============\nKENKETA\n============\n10-4=6\n</code></pre>"},{"location":"baldintzak/","title":"BALDINTZAK","text":"<p>Beti ez dugu jakingo gure kodean zer gertatzen ari den, ausazko parametro bat dugulako, datu asko prozesatzen ari garelako eta ezin dugulako guztiak nolakoak diren jakin... Horregatik baldintzazko sententziak behar ditugu. Kasu bakoitzean zer gertatzen den esango digutenak. </p>"},{"location":"baldintzak/#if-ulertzen","title":"<code>if</code> ULERTZEN","text":"<p>Jarraian adibide sinple bat egingo dugu. <code>a</code> aldagaiari 1etik 9rako ausazko zenbaki bat esleituko diogu eta inprimatu egingo dugu zein den ikusi ahal izateko.</p> <p>Ondoren, tokatu zaigun zenbakia 5 baino txikiagoa, handiagoa edo berdina ote den aztertuko dugu. Horretarako 3 if prestatuko ditugu, bakoitzak baldintza hauetako bat duelarik. Kodea goitik behera exekutatzen dela badakigu, baina <code>if</code>-etan kode zatiak salto egin ditzake baldintza betetzen ez badu. Edo berdina dena, <code>if</code> horren barrura baldintza betetzen badu soilik sartuko da. </p> <p>Zerbait <code>if</code>-aren barruan dagoela esateko, tabulazio bat eskuinerago idatzi beharko dugu. Hau da, <pre><code>if (baldintza):\n    baldintza betetzen bada gertatzea nahi duguna</code></pre></p> <p>Exekutatu kodea behin eta berriro inprimatutako mezua nola aldatzen den ikusteko.</p> lehen_baldintza_adibidea.py<pre><code>import random\na = random.randrange(10) # 0etik 9rako ausazko zenbakia\n\nprint('Tokatu zaigun zenbakia: ', a)\nprint('BALDINTZEN ARABERA GAUZA BAT EDO BESTE INPRIMATUKO DUGU:')\nif (a&gt;5): # if honen barruan sartuko da soilik a&gt;5 bada\n    print(a, 'zenbakia 5 baino handiagoa da') # if barrukoa tabulazio 1 eskuinerago\n\nif (a==5): # if honen barruan sartuko da soilik a==5 bada\n    print('5 tokatu zaigu')\n\nif (a&lt;5): # if honen barruan sartuko da soilik a&lt;5 bada\n    print(a, 'zenbakia 5 baino txikiagoa da')\n</code></pre>"},{"location":"baldintzak/#baldintzazko-hitz-gehiago","title":"BALDINTZAZKO HITZ GEHIAGO","text":"<p>Aurreko adibidearen fluxua aztertzen badugu hau da gertatzen dena: <pre><code>Demagun a=7 tokatu dela\nif (a&gt;5): # HAU KONPROBATUKO DU ETA SARTZEA EGOKITZEN ZAIOLA IKUSIKO DU\n    print(a, 'zenbakia 5 baino handiagoa da') #HAU INPRIMATUKO DU\nif (a==5): # HAU KONPROBATUKO DU ETA EZ SARTZEA EGOKITZEN ZAIOLA ERABAKIKO DU\n    print('5 tokatu zaigu')\nif (a&lt;5): # HAU KONPROBATUKO DU ETA EZ SARTZEA EGOKITZEN ZAIOLA ERABAKIKO DU\n    print(a, 'zenbakia 5 baino txikiagoa da')</code></pre></p> <p>Baina <code>if</code> batean sartu denean, guk badakigu besteak konprobatu beharrik ere ez dituela. Kodea handia bada eta konprobatzea asko kostatzen bazaio alperrik galdutako denbora da. </p> <p>Hau ekiditeko, <code>elif</code> existitzen da. Hitz hau <code>else if</code>-en laburdura bat da. Esan nahi duena da: aurreko <code>if</code>-ean edo <code>elif</code>-ean sartu ez bazara probatu hemen. </p> elif.py<pre><code>import random\na = random.randrange(10) # 0etik 9rako ausazko zenbakia\n\nprint('Tokatu zaigun zenbakia: ', a)\nif (a&gt;5): # hemen sartzen bada ez ditu hurrengo elif-ak konprobatuko\n    print(a, 'zenbakia 5 baino handiagoa da') \n\nelif (a==5): # hemen sartzen bada ez du hurrengo elif-a konprobatuko\n    print('5 tokatu zaigu') \n\nelif (a&lt;5): \n    print(a, 'zenbakia 5 baino txikiagoa da')\n</code></pre> <p>Azkenik <code>else</code> hitza ere existitzen da. Hau <code>if</code> edo <code>elif</code> batean ere sartu ez denean exekutatzen da soilik eta, horregatik, beti baldintza zikloaren amaieran idatzi behar da. </p> else.py<pre><code>import random\na = random.randrange(10) # 0etik 9rako ausazko zenbakia\n\nprint('Tokatu zaigun zenbakia: ', a)\nif (a==5): # hemen sartzen bada ez du hurrengo elif edo else konprobatuko\n    print('5 tokatu zaigu') \n\nelif (a==4): # hemen sartzen bada ez du hurrengo else konprobatuko\n    print('4 tokatu zaigu') \n\nelse: # if-ean edo elif-ean sartu ez bada hemen sartuko da nahiz eta a='kaixo' izan\n    print('ez zaigu ez 4 eta ez 5 tokatu')\n</code></pre>"},{"location":"boolearrak/","title":"BOOLEARRAK","text":"<p>TEORIA: aldagai boolearra</p> <p><code>True</code> edo <code>False</code> balioa har dezakete soilik. </p>"},{"location":"boolearrak/#zenbaki-konparaketa","title":"ZENBAKI KONPARAKETA","text":"<p>Zenbakiak konparatzeko oso baliogarria. </p> <ul> <li>Txikiago: <code>&lt;</code></li> <li>Handiago: <code>&gt;</code></li> <li>Txikiago edo berdin: <code>&lt;=</code></li> <li>Handiago edo berdin: <code>&gt;=</code></li> <li>Berdinak: <code>==</code></li> <li>Ezberdinak: <code>!=</code></li> </ul> zenbaki_konparazioak.py<pre><code>print(10&lt;9)\nprint(10&gt;9)\nprint(10&lt;=9)\nprint(10&gt;=9)\nprint(10&lt;=10)\nprint(10==9)\nprint(10!=9)\n</code></pre>"},{"location":"boolearrak/#bilaketak","title":"BILAKETAK","text":"in.py<pre><code>esaldia = 'Kaixo, mundua'\n\nprint('Kaixo' in esaldia)\nprint('o, mun' in esaldia)\nprint('duak' in esaldia)\nprint('--------------------------')\nprint('Kontuz maiuskula/minuskula')\nprint('kaixo' in esaldia) # Ez du aurkituko\nesaldia = esaldia.lower() # esaldi guztia minuskulara aldatu\nprint('kaixo' in esaldia) # Orain aurkituko du\n</code></pre> not_in.py<pre><code>esaldia = 'Kaixo, mundua'\n\nprint('Kaixo' not in esaldia)\nprint('o, mun' not in esaldia)\nprint('munduak' not in esaldia)\n</code></pre>"},{"location":"boolearrak/#aukera-gehiago","title":"AUKERA GEHIAGO","text":"<p>Metodo batzuk, <code>True</code> edo <code>False</code> itzuliko digute. Betiko moduan, ezinezkoa da denak buruz jakitea, unean uneko beharrei erantzuten dietenak bilatzen eta interpretatzen jakin behar dugu. </p> <p>Adibidez:</p> <p></p> metodo_boolear_batzuk.py<pre><code>esaldia = 'Kaixo, mundua'\nstring_numerikoa = '234'\n\nprint(esaldia.isascii())\nprint(string_numerikoa.isascii())\n\nprint(esaldia.isdigit())\nprint(string_numerikoa.isdigit())\n\nprint(esaldia.isdecimal())\nprint(string_numerikoa.isdecimal())\n</code></pre>"},{"location":"flask/","title":"FLASK","text":"<p>Entorno birtual bat sortu:</p> <pre><code># Crear el entorno virtual (en Python 3)\npython -m venv venv\n\n# Activar el entorno (Linux/macOS)\nsource venv/bin/activate\n\n# Activar el entorno (Windows)\nvenv\\Scripts\\activate</code></pre> <p>Flask instalatu</p> <pre><code>pip install flask</code></pre> <p>app.py sortu</p> <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef home():\n    return \"\u00a1Hola, Flask!\"\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> <p>Exekutatu:</p> <pre><code>python app.py</code></pre> <pre><code>flask run</code></pre> <p>Gorde requirements: <pre><code>pip freeze &gt; requirements.txt</code></pre></p> <p>.gitignoren sartu <pre><code>git init\n# Si no existe el archivo:\ntouch .gitignore\n\n# Ed\u00edtalo (con nano, VSCode, etc.) y a\u00f1ade las reglas:\nnano .gitignore\n</code></pre> nanon jarri zein diren gitignorekoak <pre><code># Ignorar el archivo .env\n.env\n\n# Ignorar la carpeta venv\nvenv/\n</code></pre></p> <p>git <pre><code>git add .\ngit commit -m \"egindako aldaketak\"\ngit push\n</code></pre></p> <p>remotoa <pre><code>git remote add origin &lt;github link&gt;\ngit push --set-upstream origin master #Lehen aldiz\n</code></pre></p> <p>FLASK EGITURA <pre><code>mi_proyecto_flask/\n\u2502\n\u251c\u2500\u2500 venv/                    # Entorno virtual (ignorado por Git)\n\u2502\n\u251c\u2500\u2500 app/                     # Paquete principal de la aplicaci\u00f3n\n\u2502   \u251c\u2500\u2500 __init__.py          # Inicializa la app y define factory pattern\n\u2502   \u251c\u2500\u2500 routes.py            # Rutas principales\n\u2502   \u251c\u2500\u2500 models.py            # Definici\u00f3n de modelos de base de datos\n\u2502   \u251c\u2500\u2500 templates/           # Plantillas HTML\n\u2502   \u2502   \u251c\u2500\u2500 base.html        # Plantilla base\n\u2502   \u2502   \u251c\u2500\u2500 index.html       # Plantilla espec\u00edfica\n\u2502   \u2502   \u2514\u2500\u2500 errors/         # Plantillas de error\n\u2502   \u251c\u2500\u2500 static/              # Archivos est\u00e1ticos\n\u2502   \u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u251c\u2500\u2500 js/\n\u2502   \u2502   \u2514\u2500\u2500 images/\n\u2502   \u2514\u2500\u2500 utils/               # Utilidades adicionales\n\u2502       \u2514\u2500\u2500 helpers.py       # Funciones auxiliares\n\u2502\n\u251c\u2500\u2500 migrations/              # Migraciones de BD (si usas Flask-Migrate)\n\u2502\n\u251c\u2500\u2500 tests/                   # Tests unitarios\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_routes.py\n\u2502\n\u251c\u2500\u2500 config.py                # Configuraciones (dev, prod, testing)\n\u251c\u2500\u2500 .env                     # Variables de entorno (ignorado)\n\u251c\u2500\u2500 .env.example             # Plantilla de variables\n\u251c\u2500\u2500 .gitignore               # Archivos ignorados por Git\n\u251c\u2500\u2500 requirements.txt         # Dependencias\n\u2514\u2500\u2500 run.py                   # Punto de entrada (opcional para desarrollo)</code></pre></p> <p>DATU BASEA</p> <pre><code>pip install flask-sqlalchemy flask-migrate</code></pre> <p>SORTU ETA MIGRATU <pre><code># Inicializa la base de datos (primera vez)\nflask db init  # Crea carpeta 'migrations'\n\n# Genera primera migraci\u00f3n\nflask db migrate -m \"Creaci\u00f3n tabla User\"\n\n# Aplica los cambios\nflask db upgrade</code></pre></p>"},{"location":"hiztegiak/","title":"HIZTEGIAK","text":"<p>Aurreko atalean zerrendaz osaturiko zerrenda hau sortu dugu: <pre><code>ikasleen_notak = [['Ane',8],['Jon',6.3],['Maider',9.6],['Aitor',3]]</code></pre></p> <p>Baina Pythonek badu objektu bat horrelakoak erraztasunez kudeatzeko: hiztegiak. </p>"},{"location":"hiztegiak/#hiztegia-ulertzen","title":"HIZTEGIA ULERTZEN","text":"<p>Hiztegia hitz gako bat balio batekin erlazionatzen duen objektu mota da. Horrelakoa da bere sintaxia:</p> hiztegi_adibidea.py<pre><code>ikasleen_notak = {'Ane':8,'Jon':6.3,'Maider':9.6,'Aitor':3}\n</code></pre> <p>Oso luzea bada hainbat lerrotan idatzi dezakegu identazioa errespetatuz: hiztegi_adibidea_2.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nprint(ikasleen_notak)\n</code></pre></p> <p>Hiztegiko elementu bakoitzak bi atal ditu: giltza(key) eta balioa(value). Edozein modutara ordena dezakegu, hau da, elementuek ez dute indize jakin bat <code>list</code> eta <code>string</code>etan moduan.</p> <p>0.posizioan dagoen elementua inprimatzen saiatzen bagara, zerrendetan bezala, errorea emango digu:</p> hiztegiko_elementuak_errorea.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nprint(ikasleen_notak[0])\n</code></pre> <p>Horren ordez, balioak giltzaren bitartez atera beharko ditugu: hiztegiko_elementuak_giltza_bidez.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nprint('Anek atera duen nota:')\nprint(ikasleen_notak['Ane'])\n</code></pre></p> <p>Horregatik, oso garrantzitsua da giltzen izenak ez errepikatzea. Bakarrak izan behar dira, bestela Pythonek ez du jakingo errepikatutako giltzen artean zeinen balioa atera behar duen. Balioak arazo gabe errepikatu daitezke ordea: bi ikaslek nota berdina atera badute, ez dago arazorik. </p> <p>TEORIA: Hiztegiak</p> <p>Hiztegiak giltza bat balio batekin lotzen duen objektuak dira.  Giltzak bakarrak izan behar dira (ezin dira errepikatu), baina balioak guk nahi dugun modukoak eta motatakoak izan daitezke. Adibidez: <pre><code>hiztegi_adibidea = {'giltza_1': [1,2,3], # Balioa zerrenda da\n                    'giltza_2': 'kaixo', # Balioa str da\n                    'giltza_3': 4.5      # Balioa float da\n                   }\n</code></pre></p>"},{"location":"hiztegiak/#hiztegien-sorrera","title":"HIZTEGIEN SORRERA","text":"<p>Zerrendetan moduan hiztegi huts bat sor dezakegu eta kodean zehar betetzen joan: hiztegi_hutsa_1.py<pre><code>hiztegia = {}\n# Gero beteko dugu\n</code></pre></p> hiztegi_hutsa_2.py<pre><code>hiztegia = dict()\n# Gero beteko dugu\n</code></pre> <p>Hasieratik balioak ematea ere beste modu bat da, ikasleen_notak aldagaiean egin dugun moduan.</p> <p>Zerrenda batetik abiatuz ere sor daiteke <code>dict()</code> funtzioari argumentutzat zerrenda sartuz: hiztegia_zerrendatik.py<pre><code>hiztegia = dict([['Ane',8],['Jon',6.3],['Maider',9.6],['Aitor',3]])\nprint(hiztegia)\n</code></pre></p> <p>Modu gehiago ere badaude. Momentuan komeni zaigunaren arabera moldatu behar gara beti.</p>"},{"location":"hiztegiak/#hiztegiko-elementu-kopurua","title":"HIZTEGIKO ELEMENTU KOPURUA","text":"<p>Beti bezala, <code>len()</code> erabili dezakegu, eta elementu kopurua emango digu. Baina gogoratu hiztegiko elementu bakoitzak bi atal dituela. </p> hiztegia_elementuak.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nprint(len(ikasleen_notak))\n</code></pre> <p>Nahiz eta balioak konplikatu, lau giltza badaude lau elementu egongo dira: hiztegia_elementuak.py<pre><code># Balioak tuplez osatutako hiztegiak dira kasu honetan.\nikasleen_notak = {'Ane':[('1.ebal',8), ('2.ebal',8), ('3.ebal',8)],\n                  'Jon':[('1.ebal',5.6), ('2.ebal',7.4), ('3.ebal',7.5)],\n                  'Maider':[('1.ebal',9.5), ('2.ebal',10), ('3.ebal',8.3)],\n                  'Aitor':[('1.ebal',4), ('2.ebal',5), ('3.ebal',3)],\n                 }\nprint(len(ikasleen_notak))\n</code></pre></p>"},{"location":"hiztegiak/#hiztegien-elementuetara-akzeditzen","title":"HIZTEGIEN ELEMENTUETARA AKZEDITZEN","text":""},{"location":"hiztegiak/#balioetara","title":"BALIOETARA","text":"<p>Giltza konkretu baten balioa nahi izanez gero, errazena giltzaren izena erabiltzea da: hiztegiko_balioak_giltza_bidez.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nprint(ikasleen_notak['Ane']) # Aneren balioa:8\n</code></pre></p> <p>Balio guztiak nahi izanez gero, bakoitza norena den inporta gabe: hiztegiko_balio_guztiak.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nbalio_guztiak = ikasleen_notak.values()\nprint(balio_guztiak, '|MOTA: ', type(balio_guztiak)) \n# KONTUZ! badirudi zerrenda bat dela, baina ez da.\n# values() metodoak dict_values objektu berezi bat itzulzen du,\n# eta hauek ezin dira aldatu edo indexatu zerrenda bat bezala.\n# Askotan zerrenda bat edukitzea komodoagoa denez:\nbalio_guztien_zerrenda = list(balio_guztiak)\nprint('Zerrendara bihurtuta: ', balio_guztien_zerrenda)\n</code></pre></p>"},{"location":"hiztegiak/#giltzetara","title":"GILTZETARA","text":"hiztegiko_giltzak.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\ngiltzak = ikasleen_notak.keys() # Zerrenda bat dirudi, baina ez da!\nprint(giltzak)\n# Lehengo moduan, zerrenda nahi badugu:\nprint(list(giltzak))\n</code></pre>"},{"location":"hiztegiak/#biak-batera","title":"BIAK BATERA","text":"biak_batera.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\ngiltza_eta_balioa = ikasleen_notak.items() # Zerrenda bat dirudi, baina ez da!\nprint(giltza_eta_balioa)\n# Lehengo moduan, zerrenda nahi badugu:\nprint(list(giltza_eta_balioa)) # Tuplak zerrenden barnean\n</code></pre>"},{"location":"hiztegiak/#elementu-bat-badago-hiztegian","title":"ELEMENTU BAT BADAGO HIZTEGIAN?","text":""},{"location":"hiztegiak/#giltza","title":"GILTZA","text":"<p>Giltza hiztegien oinarria izanik <code>giltza in hiztegia</code> galdetzea nahikoa da.  giltza_badago.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nprint('Jon' in ikasleen_notak)\nprint('Mikel' in ikasleen_notak)\n</code></pre></p>"},{"location":"hiztegiak/#balioa","title":"BALIOA","text":"<p>Balioetarako berriz, <code>balioa in hiztegia.values()</code> egin beharko dugu.  balioa_badago.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nprint(8 in ikasleen_notak.values())\nprint(0 in ikasleen_notak.values())\n</code></pre></p>"},{"location":"hiztegiak/#hiztegiko-elementuak-aldatu","title":"HIZTEGIKO ELEMENTUAK ALDATU","text":"<p>Giltza baten balioa aldatzea erraza da, akzeso zuzena baitugu balio horretara giltzaren izena jakinda. balioa_aldatu.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nikasleen_notak['Ane'] = 4 # Aneri 4 jarri diogu 8 ordez\nprint(ikasleen_notak)\n</code></pre></p> <p><code>update()</code> metodoak berdina egingo du: balioa_aldatu.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nikasleen_notak.update({'Ane':4}) # Aneri 4 jarri diogu 8 ordez\nprint(ikasleen_notak)\n</code></pre></p> <p>Balioak aldatzerako orduan, originala kontuan hartzea posible da. Adibidez, Aitorri puntu 1 igo nahi diogu jarrera ona edukitzeagatik:</p> balioa_eraldatu.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nikasleen_notak['Aitor'] = ikasleen_notak['Aitor'] + 1 # Oraingoa = Lehengoa + 1\nprint(ikasleen_notak)\n</code></pre> <p>Balio konkretu bati dagokion giltza aldatzea ordea ez da erraza. Hasteko ez dakizu balio hori behin baino gehiagotan errepikatuta ote dagoen, beraz, ez duzu jakingo giltza egokia aldatzen ari ote zaren. Jakinda ere ez dago metodo zuzen bat balioa jakinda giltzara akzeditzeko. Errazena nahi duzun giltza ezabatu, eta berria sortzea da. </p>"},{"location":"hiztegiak/#elementu-berriak-sortu","title":"ELEMENTU BERRIAK SORTU","text":"<p>Giltza eta balio berri bat definitzea nahikoa da. </p> balioa_eraldatu.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nikasleen_notak['Julen'] = 8.6 # Julen gehitzen dugu hiztegira 8.6 notarekin\nprint(ikasleen_notak)\n</code></pre>"},{"location":"hiztegiak/#elementuak-ezabatu","title":"ELEMENTUAK EZABATU","text":"<p>Gogoratu elementuaren dei nagusia giltza bidez egiten dugula. Beraz, elementua ezabatzeko giltzari deituko diogu. Honek bere balioa ere ezabatuko du:</p> pop.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nikasleen_notak.pop('Jon') # Jon giltza eta balioa ezabatu\nprint(ikasleen_notak)\n</code></pre> <p>Beste modu bat:</p> del.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\ndel ikasleen_notak['Jon'] # Jon giltza eta balioa ezabatu\nprint(ikasleen_notak)\n</code></pre> <p>Hiztegia osorik ere ezabatu dezakegu: del.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\ndel ikasleen_notak \nprint(ikasleen_notak) # Errorea emango digu, hiztegia ezabatu baitugu\n</code></pre></p> <p>Hiztegia hustu dezakegu: clear.py<pre><code>ikasleen_notak = {'Ane':8,\n                  'Jon':6.3,\n                  'Maider':9.6,\n                  'Aitor':3\n                 }\nikasleen_notak.clear()\nprint(ikasleen_notak) # Hiztegia hutsik egongo da\n</code></pre></p>"},{"location":"hiztegiak/#hiztegien-hiztegiak","title":"HIZTEGIEN HIZTEGIAK","text":"<p>Zerrendetan moduan, hiztegi bat beste baten barnean sar dezakegu. Bi kortxete erabiliz, balio konkretutaraino iritsi ahalko gara. </p> clear.py<pre><code>ikasleen_notak = {'Ane': {'Mate':8,'Euskara':9},\n                  'Jon': {'Mate':7,'Euskara':9.5},\n                  'Maider': {'Mate':8.3,'Euskara':7.9},\n                  'Aitor': {'Mate':4.5,'Euskara':6.3},\n                 }\nprint('Aneren mateko nota:')\nprint(ikasleen_notak['Ane']['Mate']) \n\nprint('Aneren nota guztiak:')\nprint(ikasleen_notak['Ane']) \n</code></pre>"},{"location":"hiztegiak/#aukera-gehiago","title":"AUKERA GEHIAGO","text":"<p>Hiztegien metodo gehiago: https://docs.python.org/3/tutorial/datastructures.html#dictionaries</p>"},{"location":"inprimatu/","title":"NOLA JAKIN ZER ARI DEN GERTATZEN GURE KODEAN?","text":"<p>Aurreko atalean ikusi dugu <code>print()</code> erabiltzen ez badugu, ez daukagula ezer ikusterik. </p>"},{"location":"inprimatu/#inprimatu","title":"INPRIMATU","text":"<p>Gure kodeak ondo funtzionatzen ote duen ikusteko, momenturen batean inprimatzeko eskatu beharko diogu. Bestela ez dugu jakingo zer egin duen.</p> <p>TEORIA: <code>print()</code> funtzioa</p> <p>Gure kodean dagoen zerbait inprimatzeko erabiliko dugu. Kode txikietan ez da beharrezkoa, baina kodea handitzen den heinean, tartean zer gertatzen den jakiteko komenigarria izaten da. </p>"},{"location":"inprimatu/#adibideak","title":"ADIBIDEAK","text":""},{"location":"inprimatu/#1-adibidea-zertarako-print","title":"1. ADIBIDEA: Zertarako <code>print()</code>","text":"<p>Zerbait gertatu da, baina ezin dugu zer den ikusi: print_erabili_gabe.py<pre><code>2 + 3\n</code></pre></p> <p>Inprimatzen badugu, ikusiko da: print_erabiltzen.py<pre><code>print(2+3)\n</code></pre></p>"},{"location":"inprimatu/#2-adibidea-aldagai-baten-print","title":"2. ADIBIDEA: Aldagai baten <code>print()</code>","text":"<p>Zerbait gertatu da, baina ezin dugu zer den ikusi: print_erabili_gabe.py<pre><code>a = 1\nb = 2\nbatura = a + b\n</code></pre></p> <p>Inprimatzen badugu, ikusiko da: print_erabiltzen.py<pre><code>a = 1\nb = 2\nbatura = a + b\nprint(batura)\n</code></pre></p>"},{"location":"inprimatu/#2-adibidea-testua-inprimatzen","title":"2. ADIBIDEA: Testua inprimatzen","text":"<p>Pythonek ordenean inprimatuko du beti. testu_gabe.py<pre><code>a = 4\nb = 7\nbatura = a + b\nprint(a)\nprint(b)\nprint(batura)\n</code></pre></p> <p>Baina kodea handitzean, ez da erraza egindako <code>print</code> guztiak identifikatzea. Horretarako oso erabilgarria da testua inprimatzea.</p> <p>Testua inprimatzeko <code>'...'</code> edo <code>\"...\"</code> artean sartu behar da. Ondoren, aldagaiaren eta testuaren artean \"koma\" idatzi behar da.  testuarekin.py<pre><code>a = 4\nb = 7\nbatura = a + b\nprint('a aldagaiaren balioa: ', a)\nprint('b aldagaiaren balioa: ', b)\nprint('=====================')\nprint(' BIEN ARTEKO BATURA:')\nprint('=====================')\nprint(a, '+', b, '=', batura)\n</code></pre></p>"},{"location":"inprimatu/#3-adibidea-testua-lerroz-aldatzen","title":"3. ADIBIDEA: Testua lerroz aldatzen","text":"hurrengo_lerroa_lehen_aukera.py<pre><code>print('Lehen lerroa')\nprint('Bigarren lerroa')\n</code></pre> <p>Beste aukera bat ere badago. <code>\\n</code> sinboloak testua hurrengo lerrora bidaliko du:</p> hurrengo_lerroa_bigarren_aukera.py<pre><code>print('Lehen lerroa\\nBigarren lerroa')\n</code></pre>"},{"location":"inprimatu/#jarri-praktikan","title":"JARRI PRAKTIKAN","text":"<p>Kopiatu kode hau zure ordenagailuan:</p> <p><pre><code>a = 10\nb = 4\n\n# Zure kodea hemen joango da\n</code></pre> Zure kodearekin esperotako emaitza inprimatzea lortu behar duzu. </p> <p>Esperotako emaitza hau da:</p> <pre><code>10 - 4 eragiketaren emaitza 6 da.\n</code></pre>"},{"location":"nola-irakurri-kodea/","title":"NOLA IRAKURRI KODEA?","text":""},{"location":"nola-irakurri-kodea/#ordena","title":"Ordena","text":"<p>Pythonen beti goitik behera eta ezkerretik eskuinera exekutatuko da kodea. Hau da, ez da 3.lerroa exekutatuko 2.neko guztia amaitu arte.</p> <p>Kode honek errorea emango dit. Mezua inprimatzen saiatzen ari gara, baina oraindik ez du ikasi zein den mezua:</p> ordena.py<pre><code>print(mezua)\nmezua=\"Kaixo mundua\"\n</code></pre>"},{"location":"nola-irakurri-kodea/#indentazioa","title":"Indentazioa","text":"<p>Alineazioak garrantzia handia du Pythonen.</p> <p>Ondoko adibidean <code>bigarren_aldagaia</code> tab 1 barrurago dagoenez, errorea emango digu: alineazioa.py<pre><code>lehen_aldagaia = 2\n    bigarren_aldagaia = 3\nbatura = lehen_aldagaia + bigarren_aldagaia\n</code></pre></p> <p>OHARRA</p> <p>4 espazio = tab 1</p>"},{"location":"nola-irakurri-kodea/#kodea-komentatu","title":"Kodea komentatu","text":"<p>Kodea handitzen doan heinean, zati bakoitzak zer egiten duen azaltzea garrantzitsua da. Hau ez da kodearen parte izan behar, hau da, pythonek ez ditu exekutatu behar. Bi modu daude: bloke komentarioak <code>'''</code> artean edo lerro bakarreko komentarioak <code>#</code> sinboloaren ondoren.</p> komentarioak.py<pre><code>'''\nHau bloke komentario bat da. \nNahi ditudan lerroak idatzi ditzaket\n===========================\nBI ALDAGAIEN BATURA:\n===========================\n'''\nlehen_aldagaia = 2\nbigarren_aldagaia = 3\n# Hau lerro bakarreko komentarioa da.\n# Beste lerro bat komentatu nahi badut beste # bat idatzi behar da\n# Baturaren kalkulua:\nbatura = lehen_aldagaia + bigarren_aldagaia\n</code></pre> <p>OHARRA</p> <p>Kode honek ez du ezer inprimatuko, ez baitugu <code>print()</code> erabili.</p>"},{"location":"ordenagailua-prestatzen/","title":"ORDENAGAILUA PRESTATZEN","text":""},{"location":"ordenagailua-prestatzen/#non-idatziko-dut-kodigoa","title":"Non idatziko dut kodigoa?","text":"<p>Edozein tokitan idatzi dezakegu: bloc de notas, word, eskuz... baina horrelako tokietan ezin izango dugu gure kodeak zer egiten duen ikusi. Horretarako, konpiladore bat behar dugu. </p> <p>Visual Studio Code bezalako programek kodea idazteko eta hau konpilatzeko guneak eskaintzen dizkigute.</p> <p></p>"},{"location":"ordenagailua-prestatzen/#visual-studio-code","title":"Visual Studio Code","text":"<ol> <li>Instalatu VSC.  https://code.visualstudio.com/download</li> <li>Sortu proiektu bat. <ul> <li>Sortu karpeta bat ordenagailuko edozein tokitan. </li> <li>Ireki karpeta VSC-n goiko menutik: <code>FILE &gt; Open Folder</code> (ezkerretara menu bat irekiko da zure karpeta duena)</li> <li>Jarri xagua ezkerreko menu lateralean eta klikatu <code>New File</code></li> <li>Sortu dugun dokumentuari jarri <code>.py</code> amaiera. Horrela, VSC-ek badaki Python programazio hizkuntza erabiliko dugula. </li> </ul> </li> <li>Konpiladorea konfiguratu. <ul> <li>Ordenagailuan Python eta pip (zer da pip?) instalatu. https://www.python.org/downloads/</li> <li>VSC-n Python eta Python Debugger extensioak instalatu.  </li> </ul> </li> </ol> <p>Editore gehiago ere existitzen dira, norbaitek probatu nahiko balituzke: Idle, PyCharm, Spyder...</p>"},{"location":"ordenagailua-prestatzen/#lehen-froga","title":"Lehen froga","text":"<ol> <li> <p>VSC-n goiko menutik terminal berri bat ireki: <code>TERMINAL &gt; New Terminal</code></p> </li> <li> <p>Editorean kodea idatzi: froga.py<pre><code>print(\"Kaixo mundua\")\n</code></pre></p> </li> <li> <p>Zapaldu Ctrl + F5 kodea exekutatzeko.</p> </li> <li> <p>Dena ondo joan bada, terminalean horrelako zerbait ikusi beharko genuke: <pre><code>$ C:/nire_karpeta/froga.py\nKaixo mundua</code></pre></p> </li> <li>VSC-n horrela ikusiko da: </li> </ol>"},{"location":"ordenagailua-prestatzen/#exekutableak","title":"Exekutableak","text":"<p>Web honetan zehar jarraian ikusten den moduko \"exekutableak\" aurkituko dituzue. Honek konpiladore bat imitatzen du <code>Run Python</code> botoiari ematean, baina soilik kode txiki hauek frogatzeko erabil daiteke. </p> froga.py<pre><code>print(\"Kaixo mundua\")\n</code></pre> <p>Warning</p> <p><code>Run Python</code> botoi berdea ikusten ez baduzu, eguneratu web orrialdea!</p>"},{"location":"ordenagailua-prestatzen/#frogak-egin","title":"Frogak egin","text":"<p>GARRANTZITSUA</p>"},{"location":"ordenagailua-prestatzen/#ikasteko-ezinbestekoa-da-norberak-kodearekin-frogak-eta-frogak-egitea","title":"IKASTEKO EZINBESTEKOA DA NORBERAK KODEAREKIN FROGAK ETA FROGAK EGITEA!!!","text":""},{"location":"ordenagailua-prestatzen/#kode-egile-onenari-ere-kodeak-lehenengoan-erroreak-ematen-dizkio-beti-baita-ia-guztiei-ere-garrantzitsua-da-kodearen-logika-ulertzea-errore-hauek-zuzentzen-joateko","title":"Kode-egile onenari ere kodeak lehenengoan erroreak ematen dizkio (BETI, baita IA guztiei ere). Garrantzitsua da kodearen logika ulertzea errore hauek zuzentzen joateko.","text":""},{"location":"ordenagailua-prestatzen/#nola-probatu-nire-kodea","title":"Nola probatu nire kodea?","text":"<ol> <li>Zatika exekutatu (debuggeatu deitzen zaio). Kodean zehar aldagaiak inprimatu daitezke kodea ondo ote doan ikusten joateko. Zerbaitek akatsa duenean programa gelditu egingo da eta errorea zein lerrotan dagoen esango digu, baita errore mota ere. VSC-ek zati bat bakarrik exekutatzeko aukera ere ematen du, hori bakarrik aztertzeko.</li> <li>Errore-mezuak arretaz irakurri (Python-ek askotan soluzioa esaten du!).</li> <li>Aldatu parametroak kasu desberdinak simulatzeko.  </li> </ol>"},{"location":"string/","title":"STRING","text":"<p><code>'...'</code> edo <code>\"...\"</code> artean adierazten dena Pythonek string (testu) bat moduan hartzen du. Oso erabilgarria da testu luzeak prozesatzeko, bilaketak egiteko, ordenatzeko...</p>"},{"location":"string/#testua-aldagai-moduan","title":"TESTUA ALDAGAI MODUAN","text":"testua_aldagai_batean.py<pre><code>esaldia = 'Kaixo, mundua'\nprint(esaldia)\n</code></pre> <p>Zenbakiekin moduan <code>type()</code> funtzioak gure aldagaiaren mota esango digu, kasu honetan <code>str</code>. type_str.py<pre><code>esaldia = 'Kaixo, mundua'\nprint(type(esaldia))\n</code></pre></p> <p>ZENBAKIAK TESTU IZAN DAITEZKE</p> <p><code>'...'</code> edo <code>\"...\"</code> artean zenbaki bat badago, Pythonentzat string bat da.</p>"},{"location":"string/#testua-eraldatzen","title":"TESTUA ERALDATZEN","text":"<p>Testuaren karaktere bakoitzak 0-tik hasita, zenbakizko posizio bat hartzen du. Hori jakinda, testua eraldatu dezakegu: karaktereak hartu, zatiak isolatu...</p> <p>TEORIA: Testua eraldatzen</p> <ul> <li>Bi testu konkatenatu: <code>+</code></li> <li>Hurrengo lerrora pasatu: <code>\\n</code></li> <li>n.posizioko karakterea hartu: <code>aldagia[n]</code></li> <li>Eskuinetik hasita n.posizioko karakterea hartu: <code>aldagia[-n]</code></li> <li>Testuaren zati bat hartu (a poisziotik b-1 posiziora): <code>aldagia[a:b]</code> <code>b</code> ez da sartzen!</li> <li>Hasieratik a-1 posiziora:<code>aldagia[0:a]</code> edo <code>aldagia[:a]</code> <code>a</code> ez da sartzen!</li> <li>b posiziotik amaierara: <code>aldagia[b:]</code></li> <li>Testuaren karaktere kopurua jakin: <code>len(aldagaia)</code></li> </ul> testua_konkatenatu.py<pre><code>lehen_aldagaia = 'Kai'\nbigarren_aldagaia = 'xo, mundua'\nprint(lehen_aldagaia + bigarren_aldagaia)\n</code></pre> <p> Kontuz zenbakiekin!</p> zenbakia_edo_str.py<pre><code>lehen_aldagaia = 2\nbigarren_aldagaia = 5\nprint('Zenbakien batura: ',lehen_aldagaia + bigarren_aldagaia)\nlehen_aldagaia = '2'\nbigarren_aldagaia = '5'\nprint('String konkatenazioa: ',lehen_aldagaia + bigarren_aldagaia)\n</code></pre> <p>Eraldaketak ulertzeko ezinbestekoa da norberak frogak egitea! eraldaketa_batzuk.py<pre><code>esaldia = 'Kaixo, mundua'\nprint('Esaldiaren karaktere kopurua: ', len(esaldia))\nprint('Esaldiaren 0.posizioko karakterea: ', esaldia[0])\nprint('Esaldiaren 5.posizioko karakterea: ', esaldia[5])\nprint('Esaldiaren 2.posiziotik 7.nera: ', esaldia[2:8]) # 8.na ez da sartzen\nprint('Esaldiaren azken karakterea, 1.modua: ', esaldia[-1])\nprint('Esaldiaren azken karakterea, 2.modua: ', esaldia[len(esaldia)-1])\n</code></pre></p>"},{"location":"string/#aukera-gehiago","title":"AUKERA GEHIAGO","text":"<p>Zenbakiekin moduan, testuarekin ere askoz ere aukera gehiago daude, hauek eraldatzeko, bilaketak egiteko, idazteko, ezabatzeko...</p> <p>Link honetan <code>string</code> motako aldagai bati aplikatu daitezkeen built-in metodoak daude:  https://www.w3schools.com/PYTHON/python_strings_methods.asp</p> <p>Adibidez: metodo_batzuk.py<pre><code>esaldia = '   Kaixo, mundua, kaixo'\n\nesaldia_maiuskulaz = esaldia.upper()\nesaldia_minuskulaz = esaldia.lower()\nesaldia_hitza_aldatuta = esaldia.replace('Kaixo', 'Hello')\nesaldia_ertzetako_espazioak_kenduta = esaldia.strip()\nprint(esaldia_maiuskulaz)\nprint(esaldia_minuskulaz)\nprint(esaldia_hitza_aldatuta)\nprint(esaldia_ertzetako_espazioak_kenduta)\n</code></pre></p>"},{"location":"string/#jarri-praktikan","title":"JARRI PRAKTIKAN","text":""},{"location":"tuplak/","title":"TUPLAK","text":""},{"location":"zenbakiak/","title":"ZENBAKIAK","text":"<p>ZENBAKI MOTAK</p> <p>Hiru zenbaki mota:</p> <ul> <li>Osoak (Integer): 1; 2; 3466; -253; ...</li> <li>Hamartarrak (Float): 1.26; 2.00; 4.0000000000; ....</li> <li>Konplexuak (Ez dira ia erabiltzen)</li> </ul> <p>Garrantzitsua izango da jakitea zein zenbaki mota dugun aldiro, bestela zaila izango da kodean zehar errorea detektatzea.</p>"},{"location":"zenbakiak/#eragiketak","title":"ERAGIKETAK","text":"<p>TEORIA: Eragiketak zenbakiekin</p> <ul> <li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>: plus, minus, bider eta zati</li> <li><code>**</code>: berreketa</li> <li><code>//</code>: zatiketaren zati osoa</li> <li><code>%</code>: zatiketaren hondarra</li> </ul> zatiketan_float.py<pre><code># Nahiz eta zatiketa bat zehatza izan, beti Float lortuko dugu.\nx = 8\ny = 2\nprint('Zatiketaren emaitza: ', x/y)\nprint('Zatiketaren emaitzaren mota: ', type(x/y))\n</code></pre> zatiketa_motak.py<pre><code>x = 10\ny = 3\nprint(x,'/',y, 'emaitza: ', x/y, '| Mota: ',type(x/y))\nprint(x,'/',y, 'ren zati osoa: ', x//y, '| Mota: ',type(x//y))\nprint(x,'/',y, 'ren hondarra: ', x%y, '| Mota: ',type(x%y))\n</code></pre>"},{"location":"zenbakiak/#type-aldaketak","title":"TYPE ALDAKETAK","text":"type_aldaketak_1.py<pre><code>x = 4.0\nprint(type(x)) # Hemen x float da\nx = int(x) # x int izatera aldatu\nprint('x berria: ',x)\nprint(type(x))\n</code></pre> type_aldaketak_2.py<pre><code>x = 6\nprint(type(x)) # Hemen x int da\nx = float(x) # x float izatera aldatu\nprint('x berria: ',x)\nprint(type(x))\n</code></pre>"},{"location":"zenbakiak/#aukera-gehiago","title":"AUKERA GEHIAGO","text":"<p>Pythonek mila eta mila aukera ematen dizkigu zenbakiekin aritzeko. Apurka-apurka deskubritzen joan behar gara sortzen zaizkigun beharren arabera. </p> <p>Hemen adibidetxo bat <code>math</code> modulua erabilita. Moduluak jada sortuta dauden kode zatiak dira, eta bertatik funtzioak, aldagaiak... har ditzakegu. Modulu bakoitzak bere dokumentazioa du. Adibidez, <code>math</code> moduluarena: https://docs.python.org/3/library/math.html math_modulua_erabiltzen.py<pre><code>import math # modulua inportatu behar dugu erabili ahal izateko\npi_zenbakia = math.pi # math modulutik pi hartzen dugu\nprint(pi_zenbakia)\n# Pi zenbakia bi dezimalekin soilik:\nprint(round(pi_zenbakia,2))\n</code></pre></p>"},{"location":"zenbakiak/#jarri-praktikan","title":"JARRI PRAKTIKAN","text":""},{"location":"zenbakiak/#1ariketa","title":"1.ARIKETA","text":"<p>Izendatu bi aldagai. <code>x=11</code>eta  <code>y=3</code>. </p> <ul> <li>Inprimatu x/y-en emaitza 2 dezimalekin.</li> <li>Inprimatu x/y egitean sortzen den hondarra.</li> <li>Inprimatu marra horizontal bikoitz bat.</li> <li><code>eragiketa</code> izeneko aldagai batean gorde: x/y-ren_emaitza_osoa * y + lehen_kalkulatutako_hondarra</li> <li>Kodearen amaieran kopiatu hau: <code>print(eragiketa, '=', x)</code></li> <li>Exekutatu kodea</li> </ul> <p>Esperotako emaitza ZEHATZ-MEHATZ: <pre><code>11 / 3 egitean 3.67 lortzen da.\n11 / 3 egitean sortzen den hondarra:  2\n========================================\n11 = 11</code></pre></p>"},{"location":"zenbakiak/#2ariketa","title":"2.ARIKETA","text":"<ul> <li>Inportatu <code>random</code> modulua</li> <li>Gorde aldagai batean 1 eta 20 tarteko ausazko zenbaki oso bat (dokumentazioa begiratu nola egiten den ikusteko).</li> <li>Inprimatu aldagaia eta ikusi nola kodea exekutatzen den bakoitzean zenbaki ezberdin bat inprimatzen den. </li> </ul>"},{"location":"zerrendak/","title":"ZERRENDAK","text":"<p>Aldagai bat baino gehiago aldagai bakarrean gordetzea ahalbidetzen digute <code>[...]</code> artean eta <code>,</code>-ekin bananduta idazten baditugu.  <pre><code>zerrenda = [aldagaia_1, aldagaia_2, ...]</code></pre></p> <p>Edozein aldagai mota gorde dezakegu zerrendan. <pre><code>zerrenda = [2.34, 'Kaixo', True] # Kasu honetan: Float, String, Boolean\n</code></pre></p> <p>TEORIA: zerrendak</p> <p><pre><code>zerrenda = [aldagaia_1, aldagaia_2, aldagaia_3]</code></pre> Zerrenda batean elementu bakoitzak posizio bat hartzen du. Goiko zerrendan:</p> <ul> <li><code>aldagaia_1</code> 0.posizioan dago</li> <li><code>aldagaia_2</code> 1.posizioan dago</li> <li><code>aldagaia_3</code> 2.posizioan dago</li> </ul>"},{"location":"zerrendak/#zerrenden-sorrera","title":"ZERRENDEN SORRERA","text":"<p>Zerrenda bat hainbat modutare sor daiteke. </p>"},{"location":"zerrendak/#i-zerrenda-hutsik-hasi-eta-gero-betetzen-joan","title":"(i) Zerrenda hutsik hasi eta gero betetzen joan","text":"<pre><code>zerrenda = []\n# Kodean zehar behar dugunarekin beteko dugu\n# Momentuz hutsik dago:\nprint(zerrenda)\n</code></pre>"},{"location":"zerrendak/#ii-zerrenda-hasieratik-bete","title":"(ii) Zerrenda hasieratik bete","text":"<pre><code>zerrenda = ['gorria', 'berdea', 'urdina']\nprint(zerrenda)\n</code></pre> <p>Luzea bada, lerro ezberdinetan jarri dezakegu identazioa errespetatuz. <pre><code>zerrenda = ['gorria',\n            'berdea',\n            'urdina',\n            'horia',\n            'morea',\n            'beltza',\n            'txuria',\n           ]\nprint(zerrenda)\n</code></pre></p>"},{"location":"zerrendak/#iii-list-funtzioa-erabili","title":"(iii) <code>list()</code> funtzioa erabili","text":"<pre><code>zerrenda = list(('gorria','berdea', 'urdina')) # Kontuz, parentesi bikoitza!\nprint(zerrenda)\n</code></pre>"},{"location":"zerrendak/#iv-testu-bat-zatitu-split-metodoa-erabiliz","title":"(iv) Testu bat zatitu <code>split()</code> metodoa erabiliz","text":"<pre><code>testua = 'Euskara Euskal Herriko hizkuntza da. Hizkuntza bakartua da, ez baitzaio ahaidetasunik aurkitu. Euskaraz mintzo direnei euskaldun deritze.'\nzerrenda = testua.split() # Split hutsik utziz gero, espaziotatik sortuko du zerrenda\nprint(zerrenda)\nprint('----------------------------------')\nzerrenda = testua.split('.') # Split funtzioan sartutako argumentutik sortuko du zerrenda\nprint(zerrenda)\n</code></pre>"},{"location":"zerrendak/#zerrendaren-luzeera","title":"ZERRENDAREN LUZEERA","text":"<p><code>len()</code> funtzioak zerrendan dauden elementu kopurua esango digu.</p> zerrenda_luzeera.py<pre><code>zerrenda = ['gorria', 'berdea', 'urdina']\nluzeera = len(zerrenda)\nprint(luzeera)\n</code></pre>"},{"location":"zerrendak/#zerrendako-elementuak-aukeratzen","title":"ZERRENDAKO ELEMENTUAK AUKERATZEN","text":"<p><code>string</code> baten antzera funtzionatzen du, posizio horretan dagoen elementua osorik hartuz.</p> zerrendako_elementuak_posizioka.py<pre><code>zerrenda = ['gorria', 'berdea', 'urdina']\nprint('0.posizioan: ',zerrenda[0])\nprint('1.posizioan: ',zerrenda[1])\nprint('2.posizioan: ',zerrenda[2])\n</code></pre> <p> Kontuz, ez eskatu zerrendatik kanpo dagoen indize bat! errorea.py<pre><code>zerrenda = ['gorria', 'berdea', 'urdina']\nprint('3.posizioan: ',zerrenda[3]) # 'list index out of range' errorea emango digu, ez baita 3.posizioa existitzen.\n</code></pre></p> <p>Batzuetan ez dugu zerrendaren luzeera jakingo. Eta <code>len()</code> funtzioa erabili beharko dugu. Kontuz honekin, posizioak 0tik hasten direnez, zerrendako azken elementua ez da luzeeraren berdina izango, baizik eta bat gutxiago. </p> <p>luzeera_posizioa_zehazteko.py<pre><code>zerrenda = ['gorria', 'berdea', 'urdina']\nluzeera = len(zerrenda)\nprint('Elementu kopurua: ', luzeera)\nprint('Azken posizioa: ', luzeera-1)\nprint('Azken posizioko elementua: ',zerrenda[luzeera-1]) \nprint('Azken posizioko elementua-beste modu bat: ',zerrenda[-1]) \n</code></pre> errorea.py<pre><code>zerrenda = ['gorria', 'berdea', 'urdina']\nluzeera = len(zerrenda)\nprint('Azken posizioan: ',zerrenda[luzeera]) # list index out of range errorea emango digu\n</code></pre></p> <p>Stringetan bezala zati bat aukeratu dezakegu:</p> azpizerrenda.py<pre><code>zerrenda = ['gorria', 'berdea', 'urdina', 'horia', 'morea']\nprint('Azpizerrenda 1.posiziotik 3.nera: ')\nprint(zerrenda[1:4]) # Gogoratu 4.posiziokoa ez dela sartzen\n</code></pre> <p>Zerrendak berak <code>&lt;list&gt;</code> mota izango du, baina elementu bakoitzak berea. errorea.py<pre><code>zerrenda = ['gorria', 2, True]\nprint(type(zerrenda))\nprint(type(zerrenda[0])) \nprint(type(zerrenda[1])) \nprint(type(zerrenda[2]))  \n</code></pre></p>"},{"location":"zerrendak/#elementu-bat-zerrendan-dago","title":"ELEMENTU BAT ZERRENDAN DAGO?","text":"in.py<pre><code>zerrenda = ['gorria','berdea', 'urdina']\nprint('gorria' in zerrenda)\nprint('berd' in zerrenda) # Elementua osorik hartzen du kontuan\n</code></pre> not_in.py<pre><code>zerrenda = ['gorria','berdea', 'urdina']\nprint('gorria' not in zerrenda)\nprint('morea' not in zerrenda) \n</code></pre>"},{"location":"zerrendak/#zerrendako-elementuak-aldatu","title":"ZERRENDAKO ELEMENTUAK ALDATU","text":"<p>Zerrendak oso moldagarriak dira. Elementuak aldatzea, berriak sartzea, ezabatzea... oso erraza da. </p> elementua_aldatu.py<pre><code>zerrenda = ['gorria','berdea', 'urdina']\n# 0.Posizioan beste zerbait nahi dugu:\nzerrenda[0] = 'morea' # gorriaren ordez morea jarri\nprint(zerrenda)\n</code></pre> <p>Zati bat baino gehiago ere aldatu dezakegu:</p> azpizerrenda_aldatu.py<pre><code>zerrenda = ['gorria','berdea', 'urdina', 'horia', 'arroxa']\n# 1.Posiziotik 2.nera beste zerbait nahi dugu (berdea eta urdinaren ordez beste bi):\nzerrenda[1:3] = ['morea','txuria'] \nprint(zerrenda)\n</code></pre>"},{"location":"zerrendak/#elementu-berri-bat-sortu","title":"ELEMENTU BERRI BAT SORTU","text":"<p>Zerrendak nahi bezain beste luzatu ditzakegu (ordenagailuko memoriak puf  egiten duen arte behintzat). Elementu asko badira, eskuz banan-banan sartzea ez da praktikoa, horregatik zerrendetan kode bidez elementuak nola sartu ikasi behar da. </p> <p>Ohikoena zerrendaren amaieran elementu berri bat sartzea da <code>append()</code> metodoaren bidez. <code>gure_zerrenda.append(gehitu_nahi_duguna)</code> formatuan erabitzen da.</p> append.py<pre><code>zerrenda = [\"gorria\", \"berdea\", \"urdina\"]\nzerrenda.append(\"morea\") # azken posizioan sartuko da\nprint(zerrenda)\n</code></pre> <p><code>insert()</code> metodoa erabili dezakegu, posizio jakin batean elementu bat sartzeko. Formatua: <code>gure_zerrenda.insert(posizioa,elementua)</code> insert.py<pre><code>zerrenda = [\"gorria\", \"berdea\", \"urdina\"]\nzerrenda.insert(2, \"marroia\") # \"marroia\" 2.posizioan sartuko da\nprint(zerrenda)\n</code></pre></p>"},{"location":"zerrendak/#zerrendatik-elementuak-ezabatu","title":"ZERRENDATIK ELEMENTUAK EZABATU","text":"<p><code>remove()</code> metodoak esaten diogun elementu bat (bakarra) ezabatuko du.</p> remove.py<pre><code>zerrenda = ['gorria', 'urdina','horia','beltza','urdina']\nzerrenda.remove('urdina') # Aurkitzen duen lehena ezabatuko du soilik\nprint(zerrenda)\n</code></pre> <p><code>pop()</code> metodoak esaten diogun indizeko elementua ezabatuko du. pop.py<pre><code>zerrenda = ['gorria', 'urdina','horia','beltza','urdina']\nzerrenda.pop(1) # 1.posizioko elementua ezabatuko du\nprint(zerrenda)\n</code></pre></p> pop_argumentu_gabe.py<pre><code>zerrenda = ['gorria', 'urdina','horia','beltza','urdina']\nzerrenda.pop() # Ez badiogu indizea zehazten azken elementua kenduko du\nprint(zerrenda)\n</code></pre> <p><code>del</code> hitz bereziak esaten diogun indizeko elementua ezabatuko du. del_indizea.py<pre><code>zerrenda = ['gorria', 'urdina','horia','beltza','urdina']\ndel zerrenda[1] # 1.posizioko elementua ezabatuko du\nprint(zerrenda)\n</code></pre></p> del_osorik.py<pre><code>zerrenda = ['gorria', 'urdina','horia','beltza','urdina']\ndel zerrenda # Zerrenda guztia ere ezabatu dezakegu\nprint(zerrenda) # Errorea emango du, ez baitago zerrendarik\n</code></pre>"},{"location":"zerrendak/#zerrendak-elkartu","title":"ZERRENDAK ELKARTU","text":"<p>Batzuetan bi zerrenda edukiko ditugu eta zerrenda bakarra sortu nahi izango dugu.</p> <p>Aukera bat <code>+</code> sinboloa erabiltzea da. Baina kontuz ordenarekin: +.py<pre><code>zerrenda_1 = [\"gorria\", \"berdea\", \"urdina\"]\nzerrenda_2 = [\"2\", \"3\", \"4\"]\nzerrenda_elkartuta = zerrenda_1 + zerrenda_2\nprint (zerrenda_elkartuta)\nzerrenda_elkartuta_alderantziz = zerrenda_2 + zerrenda_1\nprint (zerrenda_elkartuta_alderantziz)\n</code></pre></p> <p><code>extend()</code> metodoa ere erabili daiteke. Kasu honetan ordea, ez da aldagai berri bat sortzen, baizik eta dugun bat aldatzen dugu. Formatua:  <code>aldagaia.extend(gehitu_nahi_dugun_zerrenda)</code></p> <p>Adibide honetan, <code>zerrenda_1</code> aldagaiari aplikatuko diogu metodoa. Beraz, hau 'in-place' aldatuko da. Hau da, zerrenda originala eraldatuko dugu. extend.py<pre><code>zerrenda_1 = [\"gorria\", \"berdea\", \"urdina\"]\nzerrenda_1.extend([\"2\", \"3\", \"4\"]) # zerrenda_1 aldagaiari aplikatzen diogu metodoa\nprint (zerrenda_1) #zerrenda_1 originala jada ez daukagu\n</code></pre></p>"},{"location":"zerrendak/#zerrendak-ordenatu","title":"ZERRENDAK ORDENATU","text":"<p><code>sorted()</code> funtzioa edo <code>sort()</code> metodoa erabili dezakegu. Funtzioak kopia berri bat sortuko digu aldagai batean gorde dezakeguna, metodoak berriz zerrenda in-place aldatuko du.</p> sorted()_funtzioa.py<pre><code>zerrenda = [5,0,7,2,9,1]\nzerrenda_ordenatua = sorted(zerrenda) # Funtzioak zerrenda ordenatu du eta kopia bat eman digu guk aldagai batean gorde dezakeguna\nprint('Zerrenda ordenatua: ',zerrenda_ordenatua) \nprint('Zerrenda originala: ',zerrenda) # Zerrenda originala berdin mantentzen da\n</code></pre> sort()_metodoa.py<pre><code>zerrenda = [5,0,7,2,9,1]\nzerrenda.sort()\nprint('Zerrenda: ',zerrenda) # Metodoa aplikatzeak zerrenda originala aldatu du\n</code></pre> <p>Metodoa erabiliz zerrenda originala gorde nahi badugu, aldagai auxiliar bat erabili behar da.</p> originala_gorde_gaizki.py<pre><code>zerrenda = [5,0,7,2,9,1]\nzerrenda_aux = zerrenda\nzerrenda.sort() # Zerrenda originala ordenatzen dugu hemen\nprint(zerrenda) # Zerrenda originala galdu dugu\nprint(zerrenda_aux) # Zerrenda auxiliarra ere aldatu da\n</code></pre> <p><code>zerrenda_aux = zerrenda</code> egitean, bi aldagaiek erreferentzia bera dute (objektu berera apuntatzen ari dira. Ikusi: \"Non daude aldagaiak kodea exekutatzen den bitartean?\" atala). Horregatik, <code>sort()</code> aplikatzean biak aldatzen dira (in-place delako).</p> <p>Hainbat modu daude originala gordetzeko: originala_gorde_ondo.py<pre><code>zerrenda = [5,0,7,2,9,1]\nzerrenda_kopia_1 = zerrenda.copy() # Kopia independente bat sortzen duen metodoa\nzerrenda_kopia_2 = list(zerrenda)\nzerrenda_kopia_3 = zerrenda[:]\nzerrenda.sort() # zerrenda originala ordenatu dugu, baina gainontzekoak kopia independenteak dira\nprint(zerrenda)\nprint('k1: ',zerrenda_kopia_1) \nprint('k2: ',zerrenda_kopia_2) \nprint('k3: ',zerrenda_kopia_3)\n</code></pre></p>"},{"location":"zerrendak/#zerrenden-zerrendak","title":"ZERRENDEN ZERRENDAK","text":"<p>Interesgarria da zerrenden barruan zerrendak gorde ditzakegula. Adibidez:</p> zerrenden_zerrendak.py<pre><code>ikasleen_nota = [['Ane',8],['Jon',6.3],['Maider',9.6],['Aitor',3]]\n</code></pre> <p>Kasu honetan, zerrenda handiaren elementu bakoitza beste zerrenda bat da, ikaslearen izena eta nota gordetzen dituena. Horrelakoetarako ordea, egokiagoa da hiztegiak erabiltzea.</p> <p>Horren ordez, sor dezagun 3x3 dimentsioko matrize bat: zerrenden_zerrendak_matrizea.py<pre><code>matrizea = [[2,-3,1],[7,5,-1],[0,12,4]]\n</code></pre> Zerrenda honek 3 elementu ditu eta hauetako bakoitza 3 elementuko beste zerrenda bat da. Matrizea deitu diezaiokegu horrela adieraziz gero: <pre><code>   2  -3  1      # 1.LERROA: zerrenda handiko 0.elementua\n   7  5  -1      # 2.LERROA: zerrenda handiko 1.elementua\n   0  12  4      # 3.LERROA: zerrenda handiko 2.elementua</code></pre></p> <p>Nola aukeratu elementuak? Kortxete bikoitzarekin: lehen kortxetean zerrenda handiko posizioa zehaztuko dugu eta bigarrenean posizio horretan dagoen zerrenda txikiko hartu nahi dugun elementuaren posizioa.</p> zerrenden_zerrendak_indizeak.py<pre><code>zerrenda = [['0-0','0-1','0-2'],['1-0','1-1','1-2'],['2-0','2-1','2-2']]\nprint('Zerrenda handiko 1.posizioan eta bertan dagoen zerrenda txikiko 2.posizioan elementu hau dago:')\nprint(zerrenda[1][2])\nprint('Zerrenda handiko 2.posizioan zerrenda hau dago:')\nprint(zerrenda[2])\n</code></pre> <p>Goiko matrizera itzuliz: matrizeen_indizeak.py<pre><code>matrizea = [[2,-3,1],[7,5,-1],[0,12,4]]\nlerr2_zut1 = matrizea[1][0] \nprint('2.lerroko 1.zutabeko elementua: ',lerr2_zut1)\n</code></pre></p>"},{"location":"zerrendak/#aukera-gehiago","title":"AUKERA GEHIAGO","text":"<p>Gainontzeko aldagai moten moduan zerrendek ere metodo gehiago dituzte: https://docs.python.org/3/tutorial/datastructures.html</p>"}]}